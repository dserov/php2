5. Дан код:
class A {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
$a1 = new A();
$a2 = new A();
$a1->foo(); // 1
$a2->foo(); // 2
$a1->foo(); // 3
$a2->foo(); // 4
Что он выведет на каждом шаге? Почему?
Выведет 1234. Забавно, что статическая переменная в функции видна во всех экземплярах этого же класса. Как и статическая переменная в самом классе.

======================================================================================================
Немного изменим п.5:
class A {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
class B extends A {
}
$a1 = new A();
$b1 = new B();
$a1->foo(); // 1
$b1->foo(); // 1
$a1->foo(); // 2
$b1->foo(); // 2
6. Объясните результаты в этом случае.
Выведет 1122. Статическая переменная в функции видна во всех экземплярах ОДНОГО и того же класса. Унаследованный класс - это не тот же класс!


======================================================================================================
7. *Дан код:
class A {
    public function foo() {
        static $x = 0;
        echo ++$x;
    }
}
class B extends A {
}
$a1 = new A;
$b1 = new B;
$a1->foo(); // 1
$b1->foo(); // 1
$a1->foo(); // 2
$b1->foo(); // 2
Что он выведет на каждом шаге? Почему?

Выведет 1122. Статическая переменная в функции видна во всех экземплярах ОДНОГО и того же класса. Унаследованный класс - это не тот же класс!
Скобки при создании экземпляра класса не обязательны, если в конструктор не передается никаких параметров.
======================================================================================================
